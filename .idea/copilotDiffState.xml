<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/index.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/index.js" />
              <option name="originalContent" value="const express = require('express');&#10;const path = require('path');&#10;&#10;const app = express();&#10;const port = 3000;&#10;&#10;app.use(express.static(path.join(__dirname, 'public')));&#10;&#10;app.get('/', (req, res) =&gt; {&#10;    res.sendFile(path.join(__dirname, 'public', 'index.html'));&#10;});&#10;&#10;app.use((req, res, next) =&gt; {&#10;    res.status(404).sendFile(path.join(__dirname, 'public', 'err', 'err01.html'));&#10;});&#10;&#10;app.listen(port, () =&gt; {&#10;    console.log(`Server listening at http://localhost:${port}`);&#10;});" />
              <option name="updatedContent" value="const express = require('express');&#10;const path = require('path');&#10;const fs = require('fs');&#10;&#10;const app = express();&#10;const port = 3000;&#10;&#10;app.use(express.static(path.join(__dirname, 'public')));&#10;&#10;app.get('/', (req, res) =&gt; {&#10;    res.sendFile(path.join(__dirname, 'public', 'index.html'));&#10;});&#10;&#10;app.get('/list', (req, res) =&gt; {&#10;    const listPath = path.join(__dirname, 'public', 'src', 'list');&#10;    fs.readFile(listPath, 'utf8', (err, data) =&gt; {&#10;        if (err) {&#10;            console.error('Error reading list file:', err);&#10;            res.status(500).send('Error reading Pokemon list');&#10;            return;&#10;        }&#10;        res.type('text/plain').send(data);&#10;    });&#10;});&#10;&#10;app.use((req, res, next) =&gt; {&#10;    res.status(404).sendFile(path.join(__dirname, 'public', 'err', 'err01.html'));&#10;});&#10;&#10;app.listen(port, () =&gt; {&#10;    console.log(`Server listening at http://localhost:${port}`);&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/src/err.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/src/err.js" />
              <option name="originalContent" value="/*let currentUrl = window.location.href;&#10;&#10;if (currentUrl.length &gt; 100) {&#10;    currentUrl = currentUrl.slice(0, 97) + '...';&#10;    document.getElementById(&quot;urlRequest&quot;).innerHTML = currentUrl + `)`;&#10;} else {&#10;    document.getElementById(&quot;urlRequest&quot;).innerHTML = currentUrl + `)`;&#10;}&#10;&#10;const genderValue1 = &quot;female&quot;;&#10;const genderValue2 = &quot;male&quot;;&#10;&#10;let imageUrl = &quot;https://placeholdmon.vercel.app/?name=*&quot;;&#10;&#10;const genderAtt = Math.random() &lt; 0.5 ? genderValue1 : genderValue2;&#10;imageUrl += `&amp;gender=${genderAtt}`;&#10;&#10;const includeShiny = Math.random() &lt; 0.5;&#10;if (includeShiny) {&#10;    imageUrl += &quot;&amp;shiny&quot;;&#10;}&#10;&#10;document.getElementById(&quot;img&quot;).src = imageUrl;&#10;&#10;console.log(&quot;Generated Image SRC:&quot;, imageUrl);*/&#10;let currentUrl = window.location.href&#10;&#10;if (currentUrl.length &gt; 100) {&#10;  currentUrl = currentUrl.slice(0, 97) + `...`&#10;  document.getElementById(`urlRequest`).innerHTML = currentUrl + `)`&#10;} else {&#10;  document.getElementById(`urlRequest`).innerHTML = currentUrl + `)`&#10;}&#10;&#10;const genderValue1 = `female`&#10;const genderValue2 = `male`&#10;&#10;fetch(`/list`)&#10;  .then(response =&gt; response.text())&#10;  .then(data =&gt; {&#10;    const lines = data.split(/\r?\n/).filter(Boolean)&#10;    const randomName = lines[Math.floor(Math.random() * lines.length)]&#10;    const capitalizedName = randomName.charAt(0).toUpperCase() + randomName.slice(1).toLowerCase()&#10;&#10;    let imageUrl = `https://placeholdmon.vercel.app/?name=${randomName}`&#10;&#10;    const genderAtt = Math.random() &lt; 0.5 ? genderValue1 : genderValue2&#10;    imageUrl += `&amp;gender=${genderAtt}`&#10;&#10;    const isShiny = Math.random() &lt; 0.5&#10;    if (isShiny) {&#10;      imageUrl += `&amp;shiny`&#10;    }&#10;&#10;    document.getElementById(`img`).src = imageUrl&#10;&#10;    // Create overlay text&#10;    let overlayText = `A `&#10;    if (isShiny) {&#10;      overlayText += `shiny, `&#10;    }&#10;    overlayText += `${genderAtt} ${capitalizedName}`&#10;&#10;    document.getElementById(`overlay-text`).textContent = overlayText&#10;    console.log(`Generated Image SRC:`, imageUrl)&#10;  })&#10;  .catch(error =&gt; console.error(error))" />
              <option name="updatedContent" value="/*let currentUrl = window.location.href;&#10;&#10;if (currentUrl.length &gt; 100) {&#10;    currentUrl = currentUrl.slice(0, 97) + '...';&#10;    document.getElementById(&quot;urlRequest&quot;).innerHTML = currentUrl + `)`;&#10;} else {&#10;    document.getElementById(&quot;urlRequest&quot;).innerHTML = currentUrl + `)`;&#10;}&#10;&#10;const genderValue1 = &quot;female&quot;;&#10;const genderValue2 = &quot;male&quot;;&#10;&#10;let imageUrl = &quot;https://placeholdmon.vercel.app/?name=*&quot;;&#10;&#10;const genderAtt = Math.random() &lt; 0.5 ? genderValue1 : genderValue2;&#10;imageUrl += `&amp;gender=${genderAtt}`;&#10;&#10;const includeShiny = Math.random() &lt; 0.5;&#10;if (includeShiny) {&#10;    imageUrl += &quot;&amp;shiny&quot;;&#10;}&#10;&#10;document.getElementById(&quot;img&quot;).src = imageUrl;&#10;&#10;console.log(&quot;Generated Image SRC:&quot;, imageUrl);*/&#10;let currentUrl = window.location.href&#10;&#10;if (currentUrl.length &gt; 100) {&#10;  currentUrl = currentUrl.slice(0, 97) + `...`&#10;  document.getElementById(`urlRequest`).innerHTML = currentUrl + `)`&#10;} else {&#10;  document.getElementById(`urlRequest`).innerHTML = currentUrl + `)`&#10;}&#10;&#10;const genderValue1 = `female`&#10;const genderValue2 = `male`&#10;&#10;fetch(`/list`)&#10;  .then(response =&gt; response.text())&#10;  .then(data =&gt; {&#10;    // Filter out any HTML tags or non-Pokemon name lines&#10;    const lines = data.split(/\r?\n/)&#10;      .filter(line =&gt; line.trim() &amp;&amp; !line.includes('&lt;') &amp;&amp; !line.includes('&gt;'))&#10;      .filter(Boolean)&#10;    &#10;    if (lines.length === 0) {&#10;      console.error('No valid Pokemon names found in list')&#10;      return&#10;    }&#10;    &#10;    const randomName = lines[Math.floor(Math.random() * lines.length)].trim()&#10;    const capitalizedName = randomName.charAt(0).toUpperCase() + randomName.slice(1).toLowerCase()&#10;    &#10;    let imageUrl = `https://placeholdmon.vercel.app/?name=${randomName}`&#10;&#10;    const genderAtt = Math.random() &lt; 0.5 ? genderValue1 : genderValue2&#10;    imageUrl += `&amp;gender=${genderAtt}`&#10;&#10;    const isShiny = Math.random() &lt; 0.5&#10;    if (isShiny) {&#10;      imageUrl += `&amp;shiny`&#10;    }&#10;&#10;    document.getElementById(`img`).src = imageUrl&#10;    &#10;    // Create overlay text&#10;    let overlayText = `A `&#10;    if (isShiny) {&#10;      overlayText += `shiny, `&#10;    }&#10;    overlayText += `${genderAtt} ${capitalizedName}`&#10;    &#10;    document.getElementById(`overlay-text`).textContent = overlayText&#10;    console.log(`Generated Image SRC:`, imageUrl)&#10;    console.log(`Pokemon name used:`, randomName)&#10;  })&#10;  .catch(error =&gt; console.error(error))" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/style/err.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/style/err.css" />
              <option name="originalContent" value="body, html {&#10;    height: 100%;&#10;    margin: 0;&#10;    padding: 0;&#10;    width: 100%;&#10;}&#10;&#10;body {&#10;    background-color: #FBF7FD;&#10;    display: flex;&#10;    flex-direction: column;&#10;    color: #1C191C;&#10;    justify-content: center;&#10;    align-items: center;&#10;}&#10;&#10;main {&#10;    flex: 1;&#10;    display: flex;&#10;    justify-content: center;&#10;    align-items: center;&#10;    flex-direction: column;&#10;    max-width: 60vw;&#10;}&#10;&#10;.heading {&#10;    font-size: 2rem;&#10;    margin-bottom: 1rem;&#10;    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif;&#10;    font-weight: 500;&#10;    font-optical-sizing: auto;&#10;    text-align: center;&#10;}&#10;&#10;.text {&#10;    font-size: 1rem;&#10;    text-align: center;&#10;    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif;&#10;    font-optical-sizing: auto;&#10;}&#10;&#10;.text .url {&#10;    font-style: italic;&#10;    font-size: 0.95rem;&#10;}&#10;&#10;a {&#10;    text-decoration: none;&#10;    color: #161516;&#10;    transition-duration: 0.2s;&#10;    position: relative;&#10;}&#10;&#10;a::after {&#10;    content: &quot;&quot;;&#10;    position: absolute;&#10;    left: 0;&#10;    bottom: 0;&#10;    width: 0;&#10;    height: 2px;&#10;    background: #63458A;&#10;    transition: width 0.2s ease;&#10;}&#10;&#10;a:hover::after, a:focus::after, a:visited:hover::after {&#10;    width: 100%;&#10;}&#10;&#10;a:hover {&#10;    color: #63458A;&#10;    transition-duration: 0.2s;&#10;}&#10;&#10;a:visited {&#10;    color: #161516;&#10;    transition-duration: 0.2s;&#10;}&#10;&#10;a:visited:hover {&#10;    color: #63458A;&#10;    transition-duration: 0.2s;&#10;}&#10;&#10;.image-container {&#10;    position: relative;&#10;    display: inline-block;&#10;    max-width: 50%;&#10;    max-height: 50%;&#10;}&#10;&#10;img {&#10;    max-width: 90%;&#10;    max-height: 90%;&#10;    height: auto;&#10;    border-radius: 8px;&#10;    filter: blur(15px) grayscale(1) brightness(0.66);&#10;    transition: filter 0.2s ease, max-width 0.2s, max-height 0.2s;&#10;    display: block;&#10;    margin-left: auto;&#10;    margin-right: auto;&#10;    margin-top: auto;&#10;    margin-bottom: auto;&#10;}&#10;&#10;img:hover {&#10;    max-width: 100%;&#10;    max-height: 100%;&#10;    filter: blur(0) grayscale(0);&#10;    transition: filter 0.2s, max-width 0.2s, max-height 0.2s;&#10;}&#10;&#10;.overlay-text {&#10;    position: absolute;&#10;    top: 50%;&#10;    left: 50%;&#10;    transform: translate(-50%, -50%);&#10;    color: #FBF7FD;&#10;    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif;&#10;    font-size: 1.3rem;&#10;    font-weight: 600;&#10;    text-align: center;&#10;    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);&#10;    pointer-events: none;&#10;    z-index: 10;&#10;    transition: opacity 0.2s ease;&#10;}&#10;&#10;.image-container:hover .overlay-text {&#10;    opacity: 0;&#10;}&#10;" />
              <option name="updatedContent" value="body, html {&#10;    height: 100%;&#10;    margin: 0;&#10;    padding: 0;&#10;    width: 100%;&#10;}&#10;&#10;body {&#10;    background-color: #FBF7FD;&#10;    display: flex;&#10;    flex-direction: column;&#10;    color: #1C191C;&#10;    justify-content: center;&#10;    align-items: center;&#10;}&#10;&#10;main {&#10;    flex: 1;&#10;    display: flex;&#10;    justify-content: center;&#10;    align-items: center;&#10;    flex-direction: column;&#10;    max-width: 60vw;&#10;}&#10;&#10;.heading {&#10;    font-size: 2rem;&#10;    margin-bottom: 1rem;&#10;    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif;&#10;    font-weight: 500;&#10;    font-optical-sizing: auto;&#10;    text-align: center;&#10;}&#10;&#10;.text {&#10;    font-size: 1rem;&#10;    text-align: center;&#10;    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif;&#10;    font-optical-sizing: auto;&#10;}&#10;&#10;.text .url {&#10;    font-style: italic;&#10;    font-size: 0.95rem;&#10;}&#10;&#10;a {&#10;    text-decoration: none;&#10;    color: #161516;&#10;    transition-duration: 0.2s;&#10;    position: relative;&#10;}&#10;&#10;a::after {&#10;    content: &quot;&quot;;&#10;    position: absolute;&#10;    left: 0;&#10;    bottom: 0;&#10;    width: 0;&#10;    height: 2px;&#10;    background: #63458A;&#10;    transition: width 0.2s ease;&#10;}&#10;&#10;a:hover::after, a:focus::after, a:visited:hover::after {&#10;    width: 100%;&#10;}&#10;&#10;a:hover {&#10;    color: #63458A;&#10;    transition-duration: 0.2s;&#10;}&#10;&#10;a:visited {&#10;    color: #161516;&#10;    transition-duration: 0.2s;&#10;}&#10;&#10;a:visited:hover {&#10;    color: #63458A;&#10;    transition-duration: 0.2s;&#10;}&#10;&#10;.image-container {&#10;    position: relative;&#10;    display: flex;&#10;    justify-content: center;&#10;    align-items: center;&#10;    max-width: 50%;&#10;    max-height: 50%;&#10;}&#10;&#10;img {&#10;    max-width: 90%;&#10;    max-height: 90%;&#10;    height: auto;&#10;    border-radius: 8px;&#10;    filter: blur(15px) grayscale(1) brightness(0.66);&#10;    transition: filter 0.2s ease, max-width 0.2s, max-height 0.2s;&#10;    display: block;&#10;    margin-left: auto;&#10;    margin-right: auto;&#10;    margin-top: auto;&#10;    margin-bottom: auto;&#10;}&#10;&#10;img:hover {&#10;    max-width: 100%;&#10;    max-height: 100%;&#10;    filter: blur(0) grayscale(0);&#10;    transition: filter 0.2s, max-width 0.2s, max-height 0.2s;&#10;}&#10;&#10;.overlay-text {&#10;    position: absolute;&#10;    top: 50%;&#10;    left: 50%;&#10;    transform: translate(-50%, -50%);&#10;    color: #FBF7FD;&#10;    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif;&#10;    font-size: 1.3rem;&#10;    font-weight: 600;&#10;    text-align: center;&#10;    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);&#10;    pointer-events: none;&#10;    z-index: 10;&#10;    transition: opacity 0.2s ease;&#10;}&#10;&#10;.image-container:hover .overlay-text {&#10;    opacity: 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/style/main.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/style/main.css" />
              <option name="originalContent" value="body, html {&#10;    height: 100%;&#10;    margin: 0;&#10;    padding: 0;&#10;    width: 100%;&#10;}&#10;&#10;body {&#10;    background-color: #1C191C;&#10;    display: flex;&#10;    flex-direction: column;&#10;    color: #FBF7FD;&#10;}&#10;&#10;main {&#10;    flex: 1;&#10;    margin-left: 20vw;&#10;    transition: margin-left 0.3s;&#10;}&#10;&#10;.side {&#10;    position: fixed;&#10;    left: 0;&#10;    top: 0;&#10;    height: 100vh;&#10;    width: 20vw;&#10;    min-width: 200px;&#10;    max-width: 350px;&#10;    border-right: 0.1vw solid #232026;&#10;    background: #161516;&#10;    transition: width 0.3s, min-width 0.3s, max-width 0.3s;&#10;    overflow-x: hidden;&#10;    z-index: 1000;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: stretch;&#10;    padding-top: 1rem;&#10;    gap: 0;&#10;}&#10;&#10;.side.collapsed {&#10;    width: 0;&#10;    min-width: 0;&#10;    max-width: 0;&#10;    overflow: hidden;&#10;}&#10;&#10;@media (max-width: 768px) {&#10;    .side {&#10;        display: none;&#10;    }&#10;    main {&#10;        margin-left: 0 !important;&#10;    }&#10;}&#10;&#10;.side.collapsed + main {&#10;    margin-left: 0;&#10;}&#10;&#10;.side-item {&#10;    display: flex;&#10;    align-items: center;&#10;    gap: 0.75rem;&#10;    padding: 1rem;&#10;    background: none;&#10;    border: none;&#10;    cursor: pointer;&#10;    border-radius: 16px;&#10;    transition: background 0.2s, box-shadow 0.2s;&#10;    position: relative;&#10;    margin-bottom: 1rem;&#10;    border-bottom: 1px solid #232026;&#10;    margin-bottom: 1rem;&#10;    border-bottom: 1px solid #232026;&#10;&#10;.side-item:last-child {&#10;    margin-bottom: 0;&#10;.side-item:last-child {&#10;    margin-bottom: 0;&#10;}&#10;&#10;.side-item:first-child .side-item-img {&#10;    filter: brightness(75%);&#10;}&#10;&#10;.side-x {&#10;    margin-left: auto;&#10;    color: #888;&#10;    font-size: 1.2rem;&#10;    font-weight: bold;&#10;    cursor: pointer;&#10;    padding: 0 0.5rem;&#10;    transition: color 0.2s;&#10;    user-select: none;&#10;}&#10;&#10;.side-x:hover {&#10;    color: #ff4c4c;&#10;}&#10;" />
              <option name="updatedContent" value="body, html {&#10;    height: 100%;&#10;    margin: 0;&#10;    padding: 0;&#10;    width: 100%;&#10;}&#10;&#10;body {&#10;    background-color: #1C191C;&#10;    display: flex;&#10;    flex-direction: column;&#10;    color: #FBF7FD;&#10;}&#10;&#10;main {&#10;    flex: 1;&#10;    margin-left: 20vw;&#10;    transition: margin-left 0.3s;&#10;}&#10;&#10;.side {&#10;    position: fixed;&#10;    left: 0;&#10;    top: 0;&#10;    height: 100vh;&#10;    width: 20vw;&#10;    min-width: 200px;&#10;    max-width: 350px;&#10;    border-right: 0.1vw solid #232026;&#10;    background: #161516;&#10;    transition: width 0.3s, min-width 0.3s, max-width 0.3s;&#10;    overflow-x: hidden;&#10;    z-index: 1000;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: stretch;&#10;    padding-top: 1rem;&#10;    gap: 0;&#10;}&#10;&#10;.side.collapsed {&#10;    width: 0;&#10;    min-width: 0;&#10;    max-width: 0;&#10;    overflow: hidden;&#10;}&#10;&#10;@media (max-width: 768px) {&#10;    .side {&#10;        display: none;&#10;    }&#10;    main {&#10;        margin-left: 0 !important;&#10;    }&#10;}&#10;&#10;.side.collapsed + main {&#10;    margin-left: 0;&#10;}&#10;&#10;.side-item {&#10;    display: flex;&#10;    align-items: center;&#10;    gap: 0.75rem;&#10;    padding: 1rem;&#10;    padding-left: 1.5rem;&#10;    padding-right: 1.5rem;&#10;    text-decoration: none;&#10;    color: #fff;&#10;    background: none;&#10;    border: none;&#10;    cursor: pointer;&#10;    border-radius: 16px;&#10;    transition: background 0.2s, box-shadow 0.2s;&#10;    position: relative;&#10;    margin-bottom: 0;&#10;    border-bottom: none;&#10;    box-sizing: border-box;&#10;}&#10;&#10;.side-item + .side-item {&#10;    position: relative;&#10;}&#10;&#10;.side-item + .side-item::before {&#10;    content: &quot;&quot;;&#10;    display: block;&#10;    position: absolute;&#10;    left: 16px;&#10;    right: 16px;&#10;    top: -0.5rem;&#10;    height: 1px;&#10;    background: #8C888D;&#10;    margin: 0 auto;&#10;}&#10;&#10;.side-item:hover, .side-item:focus {&#10;    background: #232026;&#10;    box-shadow: 0 2px 8px 0 rgba(0,0,0,0.10);&#10;}&#10;&#10;.side-item-img {&#10;    width: 40px;&#10;    height: 40px;&#10;    border-radius: 50%;&#10;    object-fit: cover;&#10;    filter: brightness(50%);&#10;    transition: filter 0.2s;&#10;}&#10;&#10;.side-item:first-child .side-item-img {&#10;    filter: brightness(75%);&#10;}&#10;&#10;.side-x {&#10;    margin-left: auto;&#10;    color: #888;&#10;    font-size: 1.2rem;&#10;    font-weight: bold;&#10;    cursor: pointer;&#10;    padding: 0 0.5rem;&#10;    transition: color 0.2s;&#10;    user-select: none;&#10;}&#10;&#10;.side-x:hover {&#10;    color: #ff4c4c;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>